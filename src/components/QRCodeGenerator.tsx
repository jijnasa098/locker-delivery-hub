import React, { useEffect, useState } from 'react';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Package as PackageType } from '@/lib/mockData';
import { QRCodeSVG } from 'qrcode.react';

interface QRCodeGeneratorProps {
  packageData: PackageType;
  onClose?: () => void;
}

const QRCodeGenerator = ({ packageData, onClose }: QRCodeGeneratorProps) => {
  const [qrValue, setQrValue] = useState('');
  
  useEffect(() => {
    // Create a unique token that would be validated by the locker system
    // In a real app, this would be generated by the backend
    const token = {
      packageId: packageData.id,
      trackingNumber: packageData.trackingNumber,
      lockerNumber: packageData.lockerNumber,
      recipientId: packageData.recipientId,
      timestamp: new Date().toISOString()
    };
    
    setQrValue(JSON.stringify(token));
  }, [packageData]);

  const handleDownload = () => {
    const svg = document.getElementById('package-qrcode');
    if (svg) {
      // Create a canvas to convert SVG to PNG
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const img = new Image();
      
      // Convert SVG to data URL
      const svgData = new XMLSerializer().serializeToString(svg);
      const svgBlob = new Blob([svgData], { type: 'image/svg+xml;charset=utf-8' });
      const svgUrl = URL.createObjectURL(svgBlob);
      
      img.onload = () => {
        canvas.width = img.width;
        canvas.height = img.height;
        ctx?.drawImage(img, 0, 0);
        URL.revokeObjectURL(svgUrl);
        
        // Convert canvas to PNG and trigger download
        const pngUrl = canvas.toDataURL('image/png');
        const downloadLink = document.createElement('a');
        downloadLink.href = pngUrl;
        downloadLink.download = `package-${packageData.trackingNumber}.png`;
        document.body.appendChild(downloadLink);
        downloadLink.click();
        document.body.removeChild(downloadLink);
      };
      
      img.src = svgUrl;
    }
  };

  return (
    <Card className="w-full max-w-md mx-auto">
      <CardHeader>
        <CardTitle>Package Collection QR Code</CardTitle>
        <CardDescription>
          Show this QR code to the locker system to collect your package
        </CardDescription>
      </CardHeader>
      <CardContent className="flex justify-center">
        <div className="bg-white p-4 rounded-lg">
          <QRCodeSVG
            id="package-qrcode"
            value={qrValue}
            size={200}
            level="H"
            includeMargin={true}
            imageSettings={{
              src: "/placeholder.svg",
              x: undefined,
              y: undefined,
              height: 40,
              width: 40,
              excavate: true,
            }}
          />
        </div>
      </CardContent>
      <CardFooter className="flex flex-col sm:flex-row gap-2">
        <Button className="w-full sm:w-auto" onClick={handleDownload}>
          Download QR Code
        </Button>
        {onClose && (
          <Button variant="outline" className="w-full sm:w-auto" onClick={onClose}>
            Close
          </Button>
        )}
      </CardFooter>
    </Card>
  );
};

export default QRCodeGenerator;
